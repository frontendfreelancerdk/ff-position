import { Component, ApplicationRef, ComponentFactoryResolver, Injectable, Injector, RendererFactory2, NgModule, defineInjectable, inject, INJECTOR } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFOverlayComponent = /** @class */ (function () {
    function FFOverlayComponent() {
    }
    FFOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ff-overlay',
                    template: "",
                    styles: [":host {\n    pointer-events: none;\n    display: block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 1000;\n    width: 100%;\n    height: 100%;\n  }\n\n  :host > * {\n    pointer-events: auto;\n  }"]
                }] }
    ];
    return FFOverlayComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFOverlayService = /** @class */ (function () {
    function FFOverlayService(componentFactoryResolver, appRef, injector, rendererFactory) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @private
     * @param {?} component
     * @param {?=} target
     * @return {?}
     */
    FFOverlayService.prototype.appendComponent = /**
     * @private
     * @param {?} component
     * @param {?=} target
     * @return {?}
     */
    function (component, target) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView)))
            .rootNodes[0]));
        if (target) {
            this.renderer.appendChild(target, domElem);
        }
        else {
            this.renderer.appendChild(document.body, domElem);
        }
        return {
            componentRef: componentRef, destroy: (/**
             * @return {?}
             */
            function () {
                _this.appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            })
        };
    };
    /**
     * @return {?}
     */
    FFOverlayService.prototype.getOverlay = /**
     * @return {?}
     */
    function () {
        if (!this._overlay) {
            this.init();
        }
        return this._overlay.componentRef.hostView.rootNodes[0];
    };
    /**
     * @param {?} domElement
     * @return {?}
     */
    FFOverlayService.prototype.appendChild = /**
     * @param {?} domElement
     * @return {?}
     */
    function (domElement) {
        this.renderer.appendChild(this.getOverlay(), domElement);
    };
    /**
     * @param {?} domElement
     * @return {?}
     */
    FFOverlayService.prototype.removeChild = /**
     * @param {?} domElement
     * @return {?}
     */
    function (domElement) {
        this.renderer.removeChild(this.getOverlay(), domElement);
        if (!this.getOverlay().children.length) {
            this.destroy();
        }
    };
    /**
     * @param {?=} target
     * @return {?}
     */
    FFOverlayService.prototype.init = /**
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        if (!this._overlay) {
            this._overlay = this.appendComponent(FFOverlayComponent, target);
        }
    };
    /**
     * @return {?}
     */
    FFOverlayService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this._overlay && this._overlay.destroy();
        this._overlay = null;
    };
    /**
     * @return {?}
     */
    FFOverlayService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    FFOverlayService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FFOverlayService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector },
        { type: RendererFactory2 }
    ]; };
    /** @nocollapse */ FFOverlayService.ngInjectableDef = defineInjectable({ factory: function FFOverlayService_Factory() { return new FFOverlayService(inject(ComponentFactoryResolver), inject(ApplicationRef), inject(INJECTOR), inject(RendererFactory2)); }, token: FFOverlayService, providedIn: "root" });
    return FFOverlayService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFOverlayModule = /** @class */ (function () {
    function FFOverlayModule() {
    }
    /**
     * @return {?}
     */
    FFOverlayModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: FFOverlayModule,
            providers: [FFOverlayService]
        };
    };
    FFOverlayModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FFOverlayComponent],
                    imports: [],
                    exports: [],
                    entryComponents: [FFOverlayComponent]
                },] }
    ];
    return FFOverlayModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FFOverlayService, FFOverlayComponent, FFOverlayModule };

//# sourceMappingURL=ff-overlay.js.map