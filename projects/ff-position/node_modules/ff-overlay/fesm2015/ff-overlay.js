import { Component, ApplicationRef, ComponentFactoryResolver, Injectable, Injector, RendererFactory2, NgModule, defineInjectable, inject, INJECTOR } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFOverlayComponent {
}
FFOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: 'ff-overlay',
                template: ``,
                styles: [`:host {
    pointer-events: none;
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
    width: 100%;
    height: 100%;
  }

  :host > * {
    pointer-events: auto;
  }`]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFOverlayService {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     * @param {?} rendererFactory
     */
    constructor(componentFactoryResolver, appRef, injector, rendererFactory) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @private
     * @param {?} component
     * @param {?=} target
     * @return {?}
     */
    appendComponent(component, target) {
        /** @type {?} */
        const componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        const domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView)))
            .rootNodes[0]));
        if (target) {
            this.renderer.appendChild(target, domElem);
        }
        else {
            this.renderer.appendChild(document.body, domElem);
        }
        return {
            componentRef, destroy: (/**
             * @return {?}
             */
            () => {
                this.appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            })
        };
    }
    /**
     * @return {?}
     */
    getOverlay() {
        if (!this._overlay) {
            this.init();
        }
        return this._overlay.componentRef.hostView.rootNodes[0];
    }
    /**
     * @param {?} domElement
     * @return {?}
     */
    appendChild(domElement) {
        this.renderer.appendChild(this.getOverlay(), domElement);
    }
    /**
     * @param {?} domElement
     * @return {?}
     */
    removeChild(domElement) {
        this.renderer.removeChild(this.getOverlay(), domElement);
        if (!this.getOverlay().children.length) {
            this.destroy();
        }
    }
    /**
     * @param {?=} target
     * @return {?}
     */
    init(target) {
        if (!this._overlay) {
            this._overlay = this.appendComponent(FFOverlayComponent, target);
        }
    }
    /**
     * @return {?}
     */
    destroy() {
        this._overlay && this._overlay.destroy();
        this._overlay = null;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
}
FFOverlayService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FFOverlayService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector },
    { type: RendererFactory2 }
];
/** @nocollapse */ FFOverlayService.ngInjectableDef = defineInjectable({ factory: function FFOverlayService_Factory() { return new FFOverlayService(inject(ComponentFactoryResolver), inject(ApplicationRef), inject(INJECTOR), inject(RendererFactory2)); }, token: FFOverlayService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFOverlayModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FFOverlayModule,
            providers: [FFOverlayService]
        };
    }
}
FFOverlayModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FFOverlayComponent],
                imports: [],
                exports: [],
                entryComponents: [FFOverlayComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FFOverlayService, FFOverlayComponent, FFOverlayModule };

//# sourceMappingURL=ff-overlay.js.map