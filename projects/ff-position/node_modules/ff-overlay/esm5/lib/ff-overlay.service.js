/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, RendererFactory2 } from '@angular/core';
import { FFOverlayComponent } from './ff-overlay.component';
import * as i0 from "@angular/core";
var FFOverlayService = /** @class */ (function () {
    function FFOverlayService(componentFactoryResolver, appRef, injector, rendererFactory) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @private
     * @param {?} component
     * @param {?=} target
     * @return {?}
     */
    FFOverlayService.prototype.appendComponent = /**
     * @private
     * @param {?} component
     * @param {?=} target
     * @return {?}
     */
    function (component, target) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView)))
            .rootNodes[0]));
        if (target) {
            this.renderer.appendChild(target, domElem);
        }
        else {
            this.renderer.appendChild(document.body, domElem);
        }
        return {
            componentRef: componentRef, destroy: (/**
             * @return {?}
             */
            function () {
                _this.appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            })
        };
    };
    /**
     * @return {?}
     */
    FFOverlayService.prototype.getOverlay = /**
     * @return {?}
     */
    function () {
        if (!this._overlay) {
            this.init();
        }
        return this._overlay.componentRef.hostView.rootNodes[0];
    };
    /**
     * @param {?} domElement
     * @return {?}
     */
    FFOverlayService.prototype.appendChild = /**
     * @param {?} domElement
     * @return {?}
     */
    function (domElement) {
        this.renderer.appendChild(this.getOverlay(), domElement);
    };
    /**
     * @param {?} domElement
     * @return {?}
     */
    FFOverlayService.prototype.removeChild = /**
     * @param {?} domElement
     * @return {?}
     */
    function (domElement) {
        this.renderer.removeChild(this.getOverlay(), domElement);
        if (!this.getOverlay().children.length) {
            this.destroy();
        }
    };
    /**
     * @param {?=} target
     * @return {?}
     */
    FFOverlayService.prototype.init = /**
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        if (!this._overlay) {
            this._overlay = this.appendComponent(FFOverlayComponent, target);
        }
    };
    /**
     * @return {?}
     */
    FFOverlayService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this._overlay && this._overlay.destroy();
        this._overlay = null;
    };
    /**
     * @return {?}
     */
    FFOverlayService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    FFOverlayService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FFOverlayService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector },
        { type: RendererFactory2 }
    ]; };
    /** @nocollapse */ FFOverlayService.ngInjectableDef = i0.defineInjectable({ factory: function FFOverlayService_Factory() { return new FFOverlayService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR), i0.inject(i0.RendererFactory2)); }, token: FFOverlayService, providedIn: "root" });
    return FFOverlayService;
}());
export { FFOverlayService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFOverlayService.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    FFOverlayService.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FFOverlayService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FFOverlayService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    FFOverlayService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmYtb3ZlcmxheS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZmYtb3ZlcmxheS8iLCJzb3VyY2VzIjpbImxpYi9mZi1vdmVybGF5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2Qsd0JBQXdCLEVBRXhCLFVBQVUsRUFDVixRQUFRLEVBR1IsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDOztBQUUxRDtJQU9FLDBCQUNVLHdCQUFrRCxFQUNsRCxNQUFzQixFQUN0QixRQUFrQixFQUMxQixlQUFpQztRQUh6Qiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFHMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7Ozs7O0lBRU8sMENBQWU7Ozs7OztJQUF2QixVQUF3QixTQUFjLEVBQUUsTUFBWTtRQUFwRCxpQkFvQkM7O1lBbkJPLFlBQVksR0FBRyxJQUFJLENBQUMsd0JBQXdCO2FBQy9DLHVCQUF1QixDQUFDLFNBQVMsQ0FBQzthQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUV4QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7O1lBRXhDLE9BQU8sR0FBRyxtQkFBQSxDQUFDLG1CQUFBLFlBQVksQ0FBQyxRQUFRLEVBQXdCLENBQUM7YUFDNUQsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFlO1FBQzlCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzVDO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTztZQUNMLFlBQVksY0FBQSxFQUFFLE9BQU87OztZQUFFO2dCQUNyQixLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzlDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QixDQUFDLENBQUE7U0FDRixDQUFDO0lBQ0osQ0FBQzs7OztJQUVNLHFDQUFVOzs7SUFBakI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7OztJQUVNLHNDQUFXOzs7O0lBQWxCLFVBQW1CLFVBQVU7UUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7O0lBRU0sc0NBQVc7Ozs7SUFBbEIsVUFBbUIsVUFBVTtRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUM7Ozs7O0lBRU0sK0JBQUk7Ozs7SUFBWCxVQUFZLE1BQVk7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQzs7OztJQUVNLGtDQUFPOzs7SUFBZDtRQUNFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsc0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7O2dCQXJFRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQVpDLHdCQUF3QjtnQkFEeEIsY0FBYztnQkFJZCxRQUFRO2dCQUdSLGdCQUFnQjs7OzJCQVJsQjtDQWtGQyxBQXRFRCxJQXNFQztTQW5FWSxnQkFBZ0I7Ozs7OztJQUMzQixvQ0FBc0I7Ozs7O0lBQ3RCLG9DQUE0Qjs7Ozs7SUFHMUIsb0RBQTBEOzs7OztJQUMxRCxrQ0FBOEI7Ozs7O0lBQzlCLG9DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgUmVuZGVyZXIyLFxuICBSZW5kZXJlckZhY3RvcnkyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGRk92ZXJsYXlDb21wb25lbnR9IGZyb20gJy4vZmYtb3ZlcmxheS5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGRk92ZXJsYXlTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBfb3ZlcmxheTogYW55O1xuICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyXG4gICkge1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gIH1cblxuICBwcml2YXRlIGFwcGVuZENvbXBvbmVudChjb21wb25lbnQ6IGFueSwgdGFyZ2V0PzogYW55KSB7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICAgIC5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpXG4gICAgICAuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xuXG4gICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXG4gICAgY29uc3QgZG9tRWxlbSA9IChjb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pXG4gICAgICAucm9vdE5vZGVzWzBdIGFzIEhUTUxFbGVtZW50O1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGFyZ2V0LCBkb21FbGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZChkb2N1bWVudC5ib2R5LCBkb21FbGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBvbmVudFJlZiwgZGVzdHJveTogKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcFJlZi5kZXRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG4gICAgICAgIGNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRPdmVybGF5KCkge1xuICAgIGlmICghdGhpcy5fb3ZlcmxheSkge1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9vdmVybGF5LmNvbXBvbmVudFJlZi5ob3N0Vmlldy5yb290Tm9kZXNbMF07XG4gIH1cblxuICBwdWJsaWMgYXBwZW5kQ2hpbGQoZG9tRWxlbWVudCkge1xuICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5nZXRPdmVybGF5KCksIGRvbUVsZW1lbnQpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUNoaWxkKGRvbUVsZW1lbnQpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHRoaXMuZ2V0T3ZlcmxheSgpLCBkb21FbGVtZW50KTtcbiAgICBpZiAoIXRoaXMuZ2V0T3ZlcmxheSgpLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluaXQodGFyZ2V0PzogYW55KSB7XG4gICAgaWYgKCF0aGlzLl9vdmVybGF5KSB7XG4gICAgICB0aGlzLl9vdmVybGF5ID0gdGhpcy5hcHBlbmRDb21wb25lbnQoRkZPdmVybGF5Q29tcG9uZW50LCB0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuX292ZXJsYXkgJiYgdGhpcy5fb3ZlcmxheS5kZXN0cm95KCk7XG4gICAgdGhpcy5fb3ZlcmxheSA9IG51bGw7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgfVxufVxuIl19