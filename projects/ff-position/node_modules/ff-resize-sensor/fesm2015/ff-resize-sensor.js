import { ResizeSensor } from 'css-element-queries';
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID, Directive, ElementRef, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFResizeSensorEvent {
    /**
     * @param {?} el
     * @param {?} oldWidth
     * @param {?} oldHeight
     * @param {?} width
     * @param {?} height
     */
    constructor(el, oldWidth, oldHeight, width, height) {
        this.el = el;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
        this.width = width;
        this.height = height;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFResizeSensorService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} el
     * @param {?} callback
     * @return {?}
     */
    subscribe(el, callback) {
        if (!el || typeof callback !== 'function') {
            return;
        }
        if (isPlatformBrowser(this.platformId)) {
            let { width, height } = el.getBoundingClientRect();
            width = Math.round(width);
            height = Math.round(height);
            new ResizeSensor(el, (/**
             * @param {?} s
             * @return {?}
             */
            (s) => {
                /** @type {?} */
                const event = new FFResizeSensorEvent(el, width, height, s.width, s.height);
                callback(event);
                width = s.width;
                height = s.height;
            }));
            callback(new FFResizeSensorEvent(el, width, height, width, height));
        }
    }
}
FFResizeSensorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FFResizeSensorService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ FFResizeSensorService.ngInjectableDef = defineInjectable({ factory: function FFResizeSensorService_Factory() { return new FFResizeSensorService(inject(PLATFORM_ID)); }, token: FFResizeSensorService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFResizeSensorDirective {
    /**
     * @param {?} el
     * @param {?} service
     * @param {?} platformId
     */
    constructor(el, service, platformId) {
        this.el = el;
        this.service = service;
        this.platformId = platformId;
        this.resize = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.service.subscribe(this.el.nativeElement, (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.onResize(event);
        }));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.oldWidth = event.oldWidth;
        this.oldHeight = event.oldHeight;
        this.width = event.width;
        this.height = event.height;
        this.resize.emit(event);
    }
}
FFResizeSensorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ffResizeSensor]',
                exportAs: 'ffResizeSensor'
            },] }
];
/** @nocollapse */
FFResizeSensorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FFResizeSensorService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
FFResizeSensorDirective.propDecorators = {
    resize: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FFResizeSensorModule {
}
FFResizeSensorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FFResizeSensorDirective],
                imports: [],
                exports: [FFResizeSensorDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FFResizeSensorDirective, FFResizeSensorService, FFResizeSensorModule };

//# sourceMappingURL=ff-resize-sensor.js.map