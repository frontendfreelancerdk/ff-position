import { ResizeSensor } from 'css-element-queries';
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID, Directive, ElementRef, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFResizeSensorEvent = /** @class */ (function () {
    function FFResizeSensorEvent(el, oldWidth, oldHeight, width, height) {
        this.el = el;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
        this.width = width;
        this.height = height;
    }
    return FFResizeSensorEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFResizeSensorService = /** @class */ (function () {
    function FFResizeSensorService(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} el
     * @param {?} callback
     * @return {?}
     */
    FFResizeSensorService.prototype.subscribe = /**
     * @param {?} el
     * @param {?} callback
     * @return {?}
     */
    function (el, callback) {
        if (!el || typeof callback !== 'function') {
            return;
        }
        if (isPlatformBrowser(this.platformId)) {
            var _a = el.getBoundingClientRect(), width_1 = _a.width, height_1 = _a.height;
            width_1 = Math.round(width_1);
            height_1 = Math.round(height_1);
            new ResizeSensor(el, (/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                /** @type {?} */
                var event = new FFResizeSensorEvent(el, width_1, height_1, s.width, s.height);
                callback(event);
                width_1 = s.width;
                height_1 = s.height;
            }));
            callback(new FFResizeSensorEvent(el, width_1, height_1, width_1, height_1));
        }
    };
    FFResizeSensorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FFResizeSensorService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ FFResizeSensorService.ngInjectableDef = defineInjectable({ factory: function FFResizeSensorService_Factory() { return new FFResizeSensorService(inject(PLATFORM_ID)); }, token: FFResizeSensorService, providedIn: "root" });
    return FFResizeSensorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFResizeSensorDirective = /** @class */ (function () {
    function FFResizeSensorDirective(el, service, platformId) {
        this.el = el;
        this.service = service;
        this.platformId = platformId;
        this.resize = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FFResizeSensorDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.service.subscribe(this.el.nativeElement, (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onResize(event);
        }));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FFResizeSensorDirective.prototype.onResize = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.oldWidth = event.oldWidth;
        this.oldHeight = event.oldHeight;
        this.width = event.width;
        this.height = event.height;
        this.resize.emit(event);
    };
    FFResizeSensorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ffResizeSensor]',
                    exportAs: 'ffResizeSensor'
                },] }
    ];
    /** @nocollapse */
    FFResizeSensorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FFResizeSensorService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    FFResizeSensorDirective.propDecorators = {
        resize: [{ type: Output }]
    };
    return FFResizeSensorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFResizeSensorModule = /** @class */ (function () {
    function FFResizeSensorModule() {
    }
    FFResizeSensorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FFResizeSensorDirective],
                    imports: [],
                    exports: [FFResizeSensorDirective]
                },] }
    ];
    return FFResizeSensorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FFResizeSensorDirective, FFResizeSensorService, FFResizeSensorModule };

//# sourceMappingURL=ff-resize-sensor.js.map