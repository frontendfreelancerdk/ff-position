/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
import { FFResizeSensorEvent } from './resize-event';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
var FFResizeSensorService = /** @class */ (function () {
    function FFResizeSensorService(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} el
     * @param {?} callback
     * @return {?}
     */
    FFResizeSensorService.prototype.subscribe = /**
     * @param {?} el
     * @param {?} callback
     * @return {?}
     */
    function (el, callback) {
        if (!el || typeof callback !== 'function') {
            return;
        }
        if (isPlatformBrowser(this.platformId)) {
            var _a = el.getBoundingClientRect(), width_1 = _a.width, height_1 = _a.height;
            width_1 = Math.round(width_1);
            height_1 = Math.round(height_1);
            new ResizeSensor(el, (/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                /** @type {?} */
                var event = new FFResizeSensorEvent(el, width_1, height_1, s.width, s.height);
                callback(event);
                width_1 = s.width;
                height_1 = s.height;
            }));
            callback(new FFResizeSensorEvent(el, width_1, height_1, width_1, height_1));
        }
    };
    FFResizeSensorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FFResizeSensorService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ FFResizeSensorService.ngInjectableDef = i0.defineInjectable({ factory: function FFResizeSensorService_Factory() { return new FFResizeSensorService(i0.inject(i0.PLATFORM_ID)); }, token: FFResizeSensorService, providedIn: "root" });
    return FFResizeSensorService;
}());
export { FFResizeSensorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFResizeSensorService.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmYtcmVzaXplLXNlbnNvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZmYtcmVzaXplLXNlbnNvci8iLCJzb3VyY2VzIjpbImxpYi9mZi1yZXNpemUtc2Vuc29yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBRWxEO0lBSUUsK0JBQXlDLFVBQWU7UUFBZixlQUFVLEdBQVYsVUFBVSxDQUFLO0lBQ3hELENBQUM7Ozs7OztJQUVELHlDQUFTOzs7OztJQUFULFVBQVUsRUFBRSxFQUFFLFFBQVE7UUFDcEIsSUFBSSxDQUFDLEVBQUUsSUFBSSxPQUFPLFFBQVEsS0FBSyxVQUFVLEVBQUU7WUFDekMsT0FBTztTQUNSO1FBQ0QsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDbEMsSUFBQSwrQkFBNEMsRUFBM0Msa0JBQUssRUFBRSxvQkFBb0M7WUFDaEQsT0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBSyxDQUFDLENBQUM7WUFDMUIsUUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBTSxDQUFDLENBQUM7WUFDNUIsSUFBSSxZQUFZLENBQUMsRUFBRTs7OztZQUFFLFVBQUMsQ0FBQzs7b0JBQ2YsS0FBSyxHQUFHLElBQUksbUJBQW1CLENBQ25DLEVBQUUsRUFDRixPQUFLLEVBQ0wsUUFBTSxFQUNOLENBQUMsQ0FBQyxLQUFLLEVBQ1AsQ0FBQyxDQUFDLE1BQU0sQ0FDVDtnQkFDRCxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hCLE9BQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNoQixRQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNwQixDQUFDLEVBQUMsQ0FBQztZQUNILFFBQVEsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxPQUFLLEVBQUUsUUFBTSxFQUFFLE9BQUssRUFBRSxRQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQzs7Z0JBN0JGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0RBRWMsTUFBTSxTQUFDLFdBQVc7OztnQ0FUakM7Q0FtQ0MsQUE5QkQsSUE4QkM7U0EzQlkscUJBQXFCOzs7Ozs7SUFDcEIsMkNBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UmVzaXplU2Vuc29yfSBmcm9tICdjc3MtZWxlbWVudC1xdWVyaWVzJztcbmltcG9ydCB7RkZSZXNpemVTZW5zb3JFdmVudH0gZnJvbSAnLi9yZXNpemUtZXZlbnQnO1xuaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRkZSZXNpemVTZW5zb3JTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBhbnkpIHtcbiAgfVxuXG4gIHN1YnNjcmliZShlbCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWVsIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgd2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoKTtcbiAgICAgIGhlaWdodCA9IE1hdGgucm91bmQoaGVpZ2h0KTtcbiAgICAgIG5ldyBSZXNpemVTZW5zb3IoZWwsIChzKSA9PiB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEZGUmVzaXplU2Vuc29yRXZlbnQoXG4gICAgICAgICAgZWwsXG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIHMud2lkdGgsXG4gICAgICAgICAgcy5oZWlnaHRcbiAgICAgICAgKTtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICB3aWR0aCA9IHMud2lkdGg7XG4gICAgICAgIGhlaWdodCA9IHMuaGVpZ2h0O1xuICAgICAgfSk7XG4gICAgICBjYWxsYmFjayhuZXcgRkZSZXNpemVTZW5zb3JFdmVudChlbCwgd2lkdGgsIGhlaWdodCwgd2lkdGgsIGhlaWdodCkpO1xuICAgIH1cbiAgfVxufVxuIl19