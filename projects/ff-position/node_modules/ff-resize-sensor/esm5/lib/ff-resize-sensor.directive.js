/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Output, PLATFORM_ID } from '@angular/core';
import { FFResizeSensorService } from './ff-resize-sensor.service';
var FFResizeSensorDirective = /** @class */ (function () {
    function FFResizeSensorDirective(el, service, platformId) {
        this.el = el;
        this.service = service;
        this.platformId = platformId;
        this.resize = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FFResizeSensorDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.service.subscribe(this.el.nativeElement, (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onResize(event);
        }));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FFResizeSensorDirective.prototype.onResize = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.oldWidth = event.oldWidth;
        this.oldHeight = event.oldHeight;
        this.width = event.width;
        this.height = event.height;
        this.resize.emit(event);
    };
    FFResizeSensorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ffResizeSensor]',
                    exportAs: 'ffResizeSensor'
                },] }
    ];
    /** @nocollapse */
    FFResizeSensorDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: FFResizeSensorService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    FFResizeSensorDirective.propDecorators = {
        resize: [{ type: Output }]
    };
    return FFResizeSensorDirective;
}());
export { FFResizeSensorDirective };
if (false) {
    /** @type {?} */
    FFResizeSensorDirective.prototype.width;
    /** @type {?} */
    FFResizeSensorDirective.prototype.height;
    /** @type {?} */
    FFResizeSensorDirective.prototype.oldWidth;
    /** @type {?} */
    FFResizeSensorDirective.prototype.oldHeight;
    /** @type {?} */
    FFResizeSensorDirective.prototype.resize;
    /** @type {?} */
    FFResizeSensorDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FFResizeSensorDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    FFResizeSensorDirective.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmYtcmVzaXplLXNlbnNvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9mZi1yZXNpemUtc2Vuc29yLyIsInNvdXJjZXMiOlsibGliL2ZmLXJlc2l6ZS1zZW5zb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBR2pFO0lBWUUsaUNBQW1CLEVBQWMsRUFBVSxPQUE4QixFQUErQixVQUFlO1FBQXBHLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUF1QjtRQUErQixlQUFVLEdBQVYsVUFBVSxDQUFLO1FBRjlHLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBdUIsQ0FBQztJQUcxRCxDQUFDOzs7O0lBRUQsaURBQWU7OztJQUFmO1FBQUEsaUJBSUM7UUFIQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7Ozs7UUFBRSxVQUFBLEtBQUs7WUFDakQsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVPLDBDQUFROzs7OztJQUFoQixVQUFpQixLQUFLO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDOztnQkEzQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCOzs7O2dCQVBpQyxVQUFVO2dCQUNwQyxxQkFBcUI7Z0RBZWlELE1BQU0sU0FBQyxXQUFXOzs7eUJBSDdGLE1BQU07O0lBbUJULDhCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0F4QlksdUJBQXVCOzs7SUFDbEMsd0NBQXFCOztJQUNyQix5Q0FBc0I7O0lBQ3RCLDJDQUF3Qjs7SUFDeEIsNENBQXlCOztJQUN6Qix5Q0FDMEQ7O0lBRTlDLHFDQUFxQjs7Ozs7SUFBRSwwQ0FBc0M7Ozs7O0lBQUUsNkNBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBPdXRwdXQsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RkZSZXNpemVTZW5zb3JTZXJ2aWNlfSBmcm9tICcuL2ZmLXJlc2l6ZS1zZW5zb3Iuc2VydmljZSc7XG5pbXBvcnQge0ZGUmVzaXplU2Vuc29yRXZlbnR9IGZyb20gJy4vcmVzaXplLWV2ZW50JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZmUmVzaXplU2Vuc29yXScsXG4gIGV4cG9ydEFzOiAnZmZSZXNpemVTZW5zb3InXG59KVxuZXhwb3J0IGNsYXNzIEZGUmVzaXplU2Vuc29yRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyO1xuICBwdWJsaWMgaGVpZ2h0OiBudW1iZXI7XG4gIHB1YmxpYyBvbGRXaWR0aDogbnVtYmVyO1xuICBwdWJsaWMgb2xkSGVpZ2h0OiBudW1iZXI7XG4gIEBPdXRwdXQoKVxuICByZWFkb25seSByZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyPEZGUmVzaXplU2Vuc29yRXZlbnQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHNlcnZpY2U6IEZGUmVzaXplU2Vuc29yU2VydmljZSwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBhbnkpIHtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNlcnZpY2Uuc3Vic2NyaWJlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgZXZlbnQgPT4ge1xuICAgICAgdGhpcy5vblJlc2l6ZShldmVudCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgdGhpcy5vbGRXaWR0aCA9IGV2ZW50Lm9sZFdpZHRoO1xuICAgIHRoaXMub2xkSGVpZ2h0ID0gZXZlbnQub2xkSGVpZ2h0O1xuICAgIHRoaXMud2lkdGggPSBldmVudC53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGV2ZW50LmhlaWdodDtcbiAgICB0aGlzLnJlc2l6ZS5lbWl0KGV2ZW50KTtcbiAgfVxufVxuIl19