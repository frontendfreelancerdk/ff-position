/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
import { FFResizeSensorEvent } from './resize-event';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
export class FFResizeSensorService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
    }
    /**
     * @param {?} el
     * @param {?} callback
     * @return {?}
     */
    subscribe(el, callback) {
        if (!el || typeof callback !== 'function') {
            return;
        }
        if (isPlatformBrowser(this.platformId)) {
            let { width, height } = el.getBoundingClientRect();
            width = Math.round(width);
            height = Math.round(height);
            new ResizeSensor(el, (/**
             * @param {?} s
             * @return {?}
             */
            (s) => {
                /** @type {?} */
                const event = new FFResizeSensorEvent(el, width, height, s.width, s.height);
                callback(event);
                width = s.width;
                height = s.height;
            }));
            callback(new FFResizeSensorEvent(el, width, height, width, height));
        }
    }
}
FFResizeSensorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FFResizeSensorService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ FFResizeSensorService.ngInjectableDef = i0.defineInjectable({ factory: function FFResizeSensorService_Factory() { return new FFResizeSensorService(i0.inject(i0.PLATFORM_ID)); }, token: FFResizeSensorService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFResizeSensorService.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmYtcmVzaXplLXNlbnNvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vZmYtcmVzaXplLXNlbnNvci8iLCJzb3VyY2VzIjpbImxpYi9mZi1yZXNpemUtc2Vuc29yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS2xELE1BQU0sT0FBTyxxQkFBcUI7Ozs7SUFDaEMsWUFBeUMsVUFBZTtRQUFmLGVBQVUsR0FBVixVQUFVLENBQUs7SUFDeEQsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEVBQUUsRUFBRSxRQUFRO1FBQ3BCLElBQUksQ0FBQyxFQUFFLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO1lBQ3pDLE9BQU87U0FDUjtRQUNELElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNsQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUMsR0FBRyxFQUFFLENBQUMscUJBQXFCLEVBQUU7WUFDaEQsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUIsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsSUFBSSxZQUFZLENBQUMsRUFBRTs7OztZQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7O3NCQUNuQixLQUFLLEdBQUcsSUFBSSxtQkFBbUIsQ0FDbkMsRUFBRSxFQUNGLEtBQUssRUFDTCxNQUFNLEVBQ04sQ0FBQyxDQUFDLEtBQUssRUFDUCxDQUFDLENBQUMsTUFBTSxDQUNUO2dCQUNELFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hCLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3BCLENBQUMsRUFBQyxDQUFDO1lBQ0gsUUFBUSxDQUFDLElBQUksbUJBQW1CLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDOzs7WUE3QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OzRDQUVjLE1BQU0sU0FBQyxXQUFXOzs7Ozs7OztJQUFuQiwyQ0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSZXNpemVTZW5zb3J9IGZyb20gJ2Nzcy1lbGVtZW50LXF1ZXJpZXMnO1xuaW1wb3J0IHtGRlJlc2l6ZVNlbnNvckV2ZW50fSBmcm9tICcuL3Jlc2l6ZS1ldmVudCc7XG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGRlJlc2l6ZVNlbnNvclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueSkge1xuICB9XG5cbiAgc3Vic2NyaWJlKGVsLCBjYWxsYmFjaykge1xuICAgIGlmICghZWwgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICBsZXQge3dpZHRoLCBoZWlnaHR9ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB3aWR0aCA9IE1hdGgucm91bmQod2lkdGgpO1xuICAgICAgaGVpZ2h0ID0gTWF0aC5yb3VuZChoZWlnaHQpO1xuICAgICAgbmV3IFJlc2l6ZVNlbnNvcihlbCwgKHMpID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRkZSZXNpemVTZW5zb3JFdmVudChcbiAgICAgICAgICBlbCxcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgcy53aWR0aCxcbiAgICAgICAgICBzLmhlaWdodFxuICAgICAgICApO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgIHdpZHRoID0gcy53aWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gcy5oZWlnaHQ7XG4gICAgICB9KTtcbiAgICAgIGNhbGxiYWNrKG5ldyBGRlJlc2l6ZVNlbnNvckV2ZW50KGVsLCB3aWR0aCwgaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KSk7XG4gICAgfVxuICB9XG59XG4iXX0=