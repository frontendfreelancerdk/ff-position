/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Inject, Output, PLATFORM_ID } from '@angular/core';
import { FFResizeSensorService } from './ff-resize-sensor.service';
export class FFResizeSensorDirective {
    /**
     * @param {?} el
     * @param {?} service
     * @param {?} platformId
     */
    constructor(el, service, platformId) {
        this.el = el;
        this.service = service;
        this.platformId = platformId;
        this.resize = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.service.subscribe(this.el.nativeElement, (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.onResize(event);
        }));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.oldWidth = event.oldWidth;
        this.oldHeight = event.oldHeight;
        this.width = event.width;
        this.height = event.height;
        this.resize.emit(event);
    }
}
FFResizeSensorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ffResizeSensor]',
                exportAs: 'ffResizeSensor'
            },] }
];
/** @nocollapse */
FFResizeSensorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FFResizeSensorService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
FFResizeSensorDirective.propDecorators = {
    resize: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FFResizeSensorDirective.prototype.width;
    /** @type {?} */
    FFResizeSensorDirective.prototype.height;
    /** @type {?} */
    FFResizeSensorDirective.prototype.oldWidth;
    /** @type {?} */
    FFResizeSensorDirective.prototype.oldHeight;
    /** @type {?} */
    FFResizeSensorDirective.prototype.resize;
    /** @type {?} */
    FFResizeSensorDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FFResizeSensorDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    FFResizeSensorDirective.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmYtcmVzaXplLXNlbnNvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9mZi1yZXNpemUtc2Vuc29yLyIsInNvdXJjZXMiOlsibGliL2ZmLXJlc2l6ZS1zZW5zb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBT2pFLE1BQU0sT0FBTyx1QkFBdUI7Ozs7OztJQVFsQyxZQUFtQixFQUFjLEVBQVUsT0FBOEIsRUFBK0IsVUFBZTtRQUFwRyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBdUI7UUFBK0IsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUY5RyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQXVCLENBQUM7SUFHMUQsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7Ozs7UUFBRSxLQUFLLENBQUMsRUFBRTtZQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sUUFBUSxDQUFDLEtBQUs7UUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7OztZQTNCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7OztZQVBpQyxVQUFVO1lBQ3BDLHFCQUFxQjs0Q0FlaUQsTUFBTSxTQUFDLFdBQVc7OztxQkFIN0YsTUFBTTs7OztJQUpQLHdDQUFxQjs7SUFDckIseUNBQXNCOztJQUN0QiwyQ0FBd0I7O0lBQ3hCLDRDQUF5Qjs7SUFDekIseUNBQzBEOztJQUU5QyxxQ0FBcUI7Ozs7O0lBQUUsMENBQXNDOzs7OztJQUFFLDZDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEluamVjdCwgT3V0cHV0LCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0ZGUmVzaXplU2Vuc29yU2VydmljZX0gZnJvbSAnLi9mZi1yZXNpemUtc2Vuc29yLnNlcnZpY2UnO1xuaW1wb3J0IHtGRlJlc2l6ZVNlbnNvckV2ZW50fSBmcm9tICcuL3Jlc2l6ZS1ldmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmZlJlc2l6ZVNlbnNvcl0nLFxuICBleHBvcnRBczogJ2ZmUmVzaXplU2Vuc29yJ1xufSlcbmV4cG9ydCBjbGFzcyBGRlJlc2l6ZVNlbnNvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcbiAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuICBwdWJsaWMgb2xkV2lkdGg6IG51bWJlcjtcbiAgcHVibGljIG9sZEhlaWdodDogbnVtYmVyO1xuICBAT3V0cHV0KClcbiAgcmVhZG9ubHkgcmVzaXplID0gbmV3IEV2ZW50RW1pdHRlcjxGRlJlc2l6ZVNlbnNvckV2ZW50PigpO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBzZXJ2aWNlOiBGRlJlc2l6ZVNlbnNvclNlcnZpY2UsIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55KSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZXJ2aWNlLnN1YnNjcmliZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGV2ZW50ID0+IHtcbiAgICAgIHRoaXMub25SZXNpemUoZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBvblJlc2l6ZShldmVudCkge1xuICAgIHRoaXMub2xkV2lkdGggPSBldmVudC5vbGRXaWR0aDtcbiAgICB0aGlzLm9sZEhlaWdodCA9IGV2ZW50Lm9sZEhlaWdodDtcbiAgICB0aGlzLndpZHRoID0gZXZlbnQud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBldmVudC5oZWlnaHQ7XG4gICAgdGhpcy5yZXNpemUuZW1pdChldmVudCk7XG4gIH1cbn1cbiJdfQ==