{"version":3,"sources":["ng://ff-resize-sensor/lib/resize-event.ts","ng://ff-resize-sensor/lib/ff-resize-sensor.service.ts","ng://ff-resize-sensor/lib/ff-resize-sensor.directive.ts","ng://ff-resize-sensor/lib/ff-resize-sensor.module.ts"],"names":["FFResizeSensorEvent","el","oldWidth","oldHeight","width","height","this","FFResizeSensorService","platformId","prototype","subscribe","callback","isPlatformBrowser","_a","getBoundingClientRect","width_1","height_1","Math","round","ResizeSensor","s","event","Injectable","args","providedIn","Inject","PLATFORM_ID","FFResizeSensorDirective","service","resize","EventEmitter","ngAfterViewInit","_this","nativeElement","onResize","emit","Directive","selector","exportAs","ElementRef","Output","FFResizeSensorModule","NgModule","declarations","imports","exports"],"mappings":"yZAAA,IAAAA,EACE,SAAAA,EACWC,EACAC,EACAC,EACAC,EACAC,GAJAC,KAAAL,GAAAA,EACAK,KAAAJ,SAAAA,EACAI,KAAAH,UAAAA,EACAG,KAAAF,MAAAA,EACAE,KAAAD,OAAAA,GCNbE,EAAA,WASE,SAAAA,EAAyCC,GAAAF,KAAAE,WAAAA,SAGzCD,EAAAE,UAAAC,UAAA,SAAUT,EAAIU,GACZ,GAAKV,GAA0B,mBAAbU,GAGdC,EAAAA,kBAAkBN,KAAKE,YAAa,CAClC,IAAAK,EAAAZ,EAAAa,wBAACC,EAAAF,EAAAT,MAAOY,EAAAH,EAAAR,OACZU,EAAQE,KAAKC,MAAMH,GACnBC,EAASC,KAAKC,MAAMF,GACpB,IAAIG,EAAAA,aAAalB,EAAE,SAAGmB,OACdC,EAAQ,IAAIrB,EAChBC,EACAc,EACAC,EACAI,EAAEhB,MACFgB,EAAEf,QAEJM,EAASU,GACTN,EAAQK,EAAEhB,MACVY,EAASI,EAAEf,SAEbM,EAAS,IAAIX,EAAoBC,EAAIc,EAAOC,EAAQD,EAAOC,0BA3BhEM,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gFAGCC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,gJATtB,GCAAC,EAAA,WAgBE,SAAAA,EAAmB1B,EAAwB2B,EAA6DpB,GAArFF,KAAAL,GAAAA,EAAwBK,KAAAsB,QAAAA,EAA6DtB,KAAAE,WAAAA,EAF/FF,KAAAuB,OAAS,IAAIC,EAAAA,aAkBxB,OAbEH,EAAAlB,UAAAsB,gBAAA,WAAA,IAAAC,EAAA1B,KACEA,KAAKsB,QAAQlB,UAAUJ,KAAKL,GAAGgC,cAAa,SAAEZ,GAC5CW,EAAKE,SAASb,MAIVM,EAAAlB,UAAAyB,SAAR,SAAiBb,GACff,KAAKJ,SAAWmB,EAAMnB,SACtBI,KAAKH,UAAYkB,EAAMlB,UACvBG,KAAKF,MAAQiB,EAAMjB,MACnBE,KAAKD,OAASgB,EAAMhB,OACpBC,KAAKuB,OAAOM,KAAKd,wBA1BpBe,EAAAA,UAASb,KAAA,CAAC,CACTc,SAAU,mBACVC,SAAU,8DANsBC,EAAAA,kBAC1BhC,qCAesEkB,EAAAA,OAAMF,KAAA,CAACG,EAAAA,kDAHlFc,EAAAA,UAmBHb,EAhCA,GCAAc,EAAA,WAGA,SAAAA,KAMA,2BANCC,EAAAA,SAAQnB,KAAA,CAAC,CACRoB,aAAc,CAAChB,GACfiB,QAAS,GACTC,QAAS,CAAClB,OAGZc,EATA","sourcesContent":["export class FFResizeSensorEvent {\n  constructor(\n    readonly el: HTMLElement,\n    readonly oldWidth: number,\n    readonly oldHeight: number,\n    readonly width: number,\n    readonly height: number\n  ) {\n  }\n}\n","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {ResizeSensor} from 'css-element-queries';\nimport {FFResizeSensorEvent} from './resize-event';\nimport {isPlatformBrowser} from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FFResizeSensorService {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {\n  }\n\n  subscribe(el, callback) {\n    if (!el || typeof callback !== 'function') {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      let {width, height} = el.getBoundingClientRect();\n      width = Math.round(width);\n      height = Math.round(height);\n      new ResizeSensor(el, (s) => {\n        const event = new FFResizeSensorEvent(\n          el,\n          width,\n          height,\n          s.width,\n          s.height\n        );\n        callback(event);\n        width = s.width;\n        height = s.height;\n      });\n      callback(new FFResizeSensorEvent(el, width, height, width, height));\n    }\n  }\n}\n","import {AfterViewInit, Directive, ElementRef, EventEmitter, Inject, Output, PLATFORM_ID} from '@angular/core';\nimport {FFResizeSensorService} from './ff-resize-sensor.service';\nimport {FFResizeSensorEvent} from './resize-event';\n\n@Directive({\n  selector: '[ffResizeSensor]',\n  exportAs: 'ffResizeSensor'\n})\nexport class FFResizeSensorDirective implements AfterViewInit {\n  public width: number;\n  public height: number;\n  public oldWidth: number;\n  public oldHeight: number;\n  @Output()\n  readonly resize = new EventEmitter<FFResizeSensorEvent>();\n\n  constructor(public el: ElementRef, private service: FFResizeSensorService, @Inject(PLATFORM_ID) private platformId: any) {\n  }\n\n  ngAfterViewInit(): void {\n    this.service.subscribe(this.el.nativeElement, event => {\n      this.onResize(event);\n    });\n  }\n\n  private onResize(event) {\n    this.oldWidth = event.oldWidth;\n    this.oldHeight = event.oldHeight;\n    this.width = event.width;\n    this.height = event.height;\n    this.resize.emit(event);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {FFResizeSensorDirective} from './ff-resize-sensor.directive';\n\n@NgModule({\n  declarations: [FFResizeSensorDirective],\n  imports: [],\n  exports: [FFResizeSensorDirective]\n})\nexport class FFResizeSensorModule {\n}\n"]}