(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('css-element-queries'), require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ff-resize-sensor', ['exports', 'css-element-queries', '@angular/common', '@angular/core'], factory) :
    (factory((global['ff-resize-sensor'] = {}),global['css-element-queries'],global.ng.common,global.ng.core));
}(this, (function (exports,cssElementQueries,common,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FFResizeSensorEvent = /** @class */ (function () {
        function FFResizeSensorEvent(el, oldWidth, oldHeight, width, height) {
            this.el = el;
            this.oldWidth = oldWidth;
            this.oldHeight = oldHeight;
            this.width = width;
            this.height = height;
        }
        return FFResizeSensorEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FFResizeSensorService = /** @class */ (function () {
        function FFResizeSensorService(platformId) {
            this.platformId = platformId;
        }
        /**
         * @param {?} el
         * @param {?} callback
         * @return {?}
         */
        FFResizeSensorService.prototype.subscribe = /**
         * @param {?} el
         * @param {?} callback
         * @return {?}
         */
            function (el, callback) {
                if (!el || typeof callback !== 'function') {
                    return;
                }
                if (common.isPlatformBrowser(this.platformId)) {
                    var _a = el.getBoundingClientRect(), width_1 = _a.width, height_1 = _a.height;
                    width_1 = Math.round(width_1);
                    height_1 = Math.round(height_1);
                    new cssElementQueries.ResizeSensor(el, ( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        /** @type {?} */
                        var event = new FFResizeSensorEvent(el, width_1, height_1, s.width, s.height);
                        callback(event);
                        width_1 = s.width;
                        height_1 = s.height;
                    }));
                    callback(new FFResizeSensorEvent(el, width_1, height_1, width_1, height_1));
                }
            };
        FFResizeSensorService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FFResizeSensorService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
            ];
        };
        /** @nocollapse */ FFResizeSensorService.ngInjectableDef = i0.defineInjectable({ factory: function FFResizeSensorService_Factory() { return new FFResizeSensorService(i0.inject(i0.PLATFORM_ID)); }, token: FFResizeSensorService, providedIn: "root" });
        return FFResizeSensorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FFResizeSensorDirective = /** @class */ (function () {
        function FFResizeSensorDirective(el, service, platformId) {
            this.el = el;
            this.service = service;
            this.platformId = platformId;
            this.resize = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        FFResizeSensorDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.service.subscribe(this.el.nativeElement, ( /**
                 * @param {?} event
                 * @return {?}
                 */function (event) {
                    _this.onResize(event);
                }));
            };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        FFResizeSensorDirective.prototype.onResize = /**
         * @private
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.oldWidth = event.oldWidth;
                this.oldHeight = event.oldHeight;
                this.width = event.width;
                this.height = event.height;
                this.resize.emit(event);
            };
        FFResizeSensorDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[ffResizeSensor]',
                        exportAs: 'ffResizeSensor'
                    },] }
        ];
        /** @nocollapse */
        FFResizeSensorDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: FFResizeSensorService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
            ];
        };
        FFResizeSensorDirective.propDecorators = {
            resize: [{ type: i0.Output }]
        };
        return FFResizeSensorDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FFResizeSensorModule = /** @class */ (function () {
        function FFResizeSensorModule() {
        }
        FFResizeSensorModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [FFResizeSensorDirective],
                        imports: [],
                        exports: [FFResizeSensorDirective]
                    },] }
        ];
        return FFResizeSensorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FFResizeSensorDirective = FFResizeSensorDirective;
    exports.FFResizeSensorService = FFResizeSensorService;
    exports.FFResizeSensorModule = FFResizeSensorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ff-resize-sensor.umd.js.map