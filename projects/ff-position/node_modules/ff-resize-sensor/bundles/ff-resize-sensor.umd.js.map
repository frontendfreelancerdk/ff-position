{"version":3,"file":"ff-resize-sensor.umd.js.map","sources":["ng://ff-resize-sensor/lib/resize-event.ts","ng://ff-resize-sensor/lib/ff-resize-sensor.service.ts","ng://ff-resize-sensor/lib/ff-resize-sensor.directive.ts","ng://ff-resize-sensor/lib/ff-resize-sensor.module.ts"],"sourcesContent":["export class FFResizeSensorEvent {\n  constructor(\n    readonly el: HTMLElement,\n    readonly oldWidth: number,\n    readonly oldHeight: number,\n    readonly width: number,\n    readonly height: number\n  ) {\n  }\n}\n","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {ResizeSensor} from 'css-element-queries';\nimport {FFResizeSensorEvent} from './resize-event';\nimport {isPlatformBrowser} from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FFResizeSensorService {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {\n  }\n\n  subscribe(el, callback) {\n    if (!el || typeof callback !== 'function') {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      let {width, height} = el.getBoundingClientRect();\n      width = Math.round(width);\n      height = Math.round(height);\n      new ResizeSensor(el, (s) => {\n        const event = new FFResizeSensorEvent(\n          el,\n          width,\n          height,\n          s.width,\n          s.height\n        );\n        callback(event);\n        width = s.width;\n        height = s.height;\n      });\n      callback(new FFResizeSensorEvent(el, width, height, width, height));\n    }\n  }\n}\n","import {AfterViewInit, Directive, ElementRef, EventEmitter, Inject, Output, PLATFORM_ID} from '@angular/core';\nimport {FFResizeSensorService} from './ff-resize-sensor.service';\nimport {FFResizeSensorEvent} from './resize-event';\n\n@Directive({\n  selector: '[ffResizeSensor]',\n  exportAs: 'ffResizeSensor'\n})\nexport class FFResizeSensorDirective implements AfterViewInit {\n  public width: number;\n  public height: number;\n  public oldWidth: number;\n  public oldHeight: number;\n  @Output()\n  readonly resize = new EventEmitter<FFResizeSensorEvent>();\n\n  constructor(public el: ElementRef, private service: FFResizeSensorService, @Inject(PLATFORM_ID) private platformId: any) {\n  }\n\n  ngAfterViewInit(): void {\n    this.service.subscribe(this.el.nativeElement, event => {\n      this.onResize(event);\n    });\n  }\n\n  private onResize(event) {\n    this.oldWidth = event.oldWidth;\n    this.oldHeight = event.oldHeight;\n    this.width = event.width;\n    this.height = event.height;\n    this.resize.emit(event);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {FFResizeSensorDirective} from './ff-resize-sensor.directive';\n\n@NgModule({\n  declarations: [FFResizeSensorDirective],\n  imports: [],\n  exports: [FFResizeSensorDirective]\n})\nexport class FFResizeSensorModule {\n}\n"],"names":["isPlatformBrowser","ResizeSensor","Injectable","Inject","PLATFORM_ID","EventEmitter","Directive","ElementRef","Output","NgModule"],"mappings":"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"}
